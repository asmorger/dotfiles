"" Source your .vimrc
"source ~/.vimrc

set relativenumber number
set clipboard+=unnamed
set clipboard+=ideaput

Plug 'preservim/nerdtree`
Plug 'easymotion/vim-easymotion'

let mapleader=" "
nnoremap <Space> :action LeaderAction<cr>
nnoremap \e :e ~/.ideavimrc<CR>
nnoremap \r :action IdeaVim.ReloadVimRc.reload<CR>

set which-key
set easymotion
set NERDTree

"" -- Suggested options --
" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5

" Do incremental searching.
set incsearch

set timeoutlen=5000
let g:WhichKey_ShowVimActions = "true"

" Don't use Ex mode, use Q for formatting.
map Q gq

" Config management
let g:WhichKeyDesc_vcsGroup = "<leader>q VCS Management"
let g:WhichKeyDesc_reloadIdeavim = "<leader>qv Reload ~/.ideavimrc"
map <Leader>qv <Action>(IdeaVim.ReloadVimRc.reload)

" Git management
let g:WhichKeyDesc_gitGroup = "<leader>g Git"

let g:WhichKeyDesc_gitAnnotate = "<leader>ga Git Annotate"
map <Leader>ga <Action>(Annotate)

let g:WhichKeyDesc_gitBranches = "<leader>gb Git Branches"
map <Leader>gb <Action>(Git.Branches)

let g:WhichKeyDesc_gitShowChanges = "<leader>gc Local Changes"
map <Leader>gc <Action>(Vcs.Show.Local.Changes)

let g:WhichKeyDesc_gitLog = "<leader>gl Git Log"
map <Leader>gl <Action>(Vcs.Show.Log)

let g:WhichKeyDesc_gitRollback = "<leader>gr Git Rollback"
map <Leader>gr <Action>(Vcs.RollbackChangedLines)

let g:WhichKeyDesc_gitDiff = "<leader>gd Git Diff"
map <Leader>gd <Action>(Vcs.ShowDiffWithLocal)

" Code navigation
let g:WhichKeyDesc_codeNavGroup = "<leader>s Search"
let g:WhichKeyDesc_find = "<leader>ss Find"
map <Leader>ss <Action>(AceAction)

let g:WhichKeyDesc_replace = "<leader>sr Replace"
map <Leader>sr <Action>(Replace)

let g:WhichKeyDesc_findInPath = "<leader>sS Find in Path"
map <Leader>sS <Action>(FindInPath)

let g:WhichKeyDesc_replaceInPath = "<leader>sR Replace in Path"
map <Leader>sR <Action>(ReplaceInPath)

let g:WhichKeyDesc_goToClass = "<leader>sc Goto Class"
map <Leader>sc <Action>(GotoClass)

let g:WhichKeyDesc_goToFile = "<leader>sf Goto File"
map <Leader>sf <Action>(GotoFile)

let g:WhichKeyDesc_goToSymbol = "<leader>si Goto Symbol"
map <Leader>si <Action>(GotoSymbol)

let g:WhichKeyDesc_goToAction = "<leader>sa Goto Action"
map <Leader>sa <Action>(GotoAction)

let g:WhichKeyDesc_activateAceJump = "<leader sn Activate Ace Jump"
map <Leader>sn <Action>(AceAction)

let g:WhickeyDes_activateAceJumpTargetMode = "<leader>sN Target Mode Ace Jump"
map <Leader> sN <Action>(AceTargetAction)

let g:WhiceyDec_aceJumpGotoLine = "<leader> sg Ace Jump Line Mode"
map <Leader>sg <Action>(AceLineAction)

let g:WhichKeyDesc_searchEverywhere = "<leader>se Search Everywhere"
map <Leader>se <Action>(SearchEverywhere)

let g:WhichKeyDesc_goToDefinition = "<leader>sd Goto Definition"
map <Leader>sd <Action>(GotoDeclaration)

" Code manipulation
let g:WhichKeyDesc_reformatGroup = "<leader>r Refactor"
let g:WhichKeyDesc_reformatCode = "<leader>rf Format Code"
map <Leader>rf <Action>(ReformatCode)

let g:WhichKeyDesc_inspectCode = "<leader>ri Inspect Code"
map <Leader>ri <Action>(Analyze)

let WhichKeyDesc_refactoring = "<leader>rr Refactor Code"
map <Leader>rr <Action>(RefactoringMenu)

" Buffer management
let WhichKeyDesc_bufferGroup = "<leader>b Buffers"
let WhichKeyDesc_moveTabRight = "<leader>bv Split Right"
map <Leader>bv <Action>(MoveTabRight)

let WhichKeyDesc_moveTabDown = "<leader>bh Split Horizontal"
map <Leader>bh <Action>(MoveTabDown)

let WhichKeyDesc_unsplit = "<leader>bq Unsplit"
map <Leader>bq <Action>(Unsplit)

let WhichKeyDesc_prevSplit = "<leader>bi Prev Split"
map <Leader>bi <Action>(PrevSplitter)

let WhichKeyDesc_nextSplit = "<leader>bn Next Split"
map <Leader>bn <Action>(NextSplitter)

let WhichKeyDesc_bufferKill = "<leader>bk Kill Buffer"
map <Leader>bk <Action>(CloseContent)

let WhichKeyDesc_bufferRecent = "<leader>br Recent Buffers"
map <Leader>br <Action>(RecentLocations)

let WhichKeyDesc_toggleWindows = "<leader>bw Hide All Windows"
map <Leader>bw <Action>(HideAllWindows)

" Modes
let g:WhichKeyDesc_modesGroup = "<leader>m Modes"
let WhichKeyDesc_toggleDistractionFree = "<leader>md Distraction Free Mode"
map <Leader>md <Action>(ToggleDistractionFreeMode)

let WhichKeyDesc_togglePresentationFree = "<leader>mp Presentation Mode"
map <Leader>mp <Action>(TogglePresentationMode)

let WhichKeyDesc_toggleZenFree = "<leader>mz Zen Mode"
map <Leader>mz <Action>(ToggleZenMode)

" Debug
let g:WhichKeyDesc_debugGroup = "<leader>d Debug"
let WhichKeyDesc_toggleBreakpoint = "<leader>db Breakpoint"
map <Leader>db <Action>(ToggleLineBreakpoint)

let g:WhichKeyDesc_treeGroup = "<leader>t Toggle"
let WhichKeyDesc_treeToggle = "<leader>tn Toggle Tree"
map <Leader>tn :NERDTreeToggle<CR>

let WhichKeyDesc_treeFind = "<leader>tf Toggle Find"
map <Leader>tf :NERDTreeFind<CR>

let g:WhichKey_FontFamily = "Cascursive, monospaceq
"" -- Map ID actions to IdeaVim -- https://jb.gg/abva4t
"" Map \r to the Reformat ode action
"map \r <Action>(ReformatCode)

"" Map <leader>d to start debug
"map <leader>d <Action>(Debug)

"" Map \b to toggle the breakpoint on the current line
"map \b <Action>(ToggleLineBreakpoint)

" Find more examples here: https://jb.gg/share-ideavimrc
